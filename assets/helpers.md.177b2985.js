import{_ as s,c as a,o as n,a as l}from"./app.ba95e6f7.js";const i=JSON.parse('{"title":"Helpers","description":"","frontmatter":{},"headers":[{"level":2,"title":"original","slug":"original","link":"#original","children":[]},{"level":2,"title":"target","slug":"target","link":"#target","children":[]},{"level":2,"title":"data","slug":"data","link":"#data","children":[]},{"level":2,"title":"freeze","slug":"freeze","link":"#freeze","children":[]},{"level":2,"title":"unfreeze","slug":"unfreeze","link":"#unfreeze","children":[]},{"level":2,"title":"convertPatchesToStandard","slug":"convertpatchestostandard","link":"#convertpatchestostandard","children":[]},{"level":2,"title":"snapshot","slug":"snapshot","link":"#snapshot","children":[]}],"relativePath":"helpers.md"}'),p={name:"helpers.md"},o=l(`<h1 id="helpers" tabindex="-1">Helpers <a class="header-anchor" href="#helpers" aria-hidden="true">#</a></h1><h2 id="original" tabindex="-1">original <a class="header-anchor" href="#original" aria-hidden="true">#</a></h2><p>Gets the original object from the draft or a portion of the draft</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#82AAFF;">produce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">sub</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sub</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">original</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">original</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sub</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="target" tabindex="-1">target <a class="header-anchor" href="#target" aria-hidden="true">#</a></h2><p>Gets the shallow cloned object if any modification happened at this level of the draft, or the original object otherwise.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#82AAFF;">produce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">target</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">original</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">target</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">original</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">original</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">target</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-hidden="true">#</a></h2><p>Gets the data associated with the passed portion of the draft; it is unlikely that you need this.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#82AAFF;">produce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">target</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shallow</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">target</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shallow</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="freeze" tabindex="-1">freeze <a class="header-anchor" href="#freeze" aria-hidden="true">#</a></h2><p>See the <a href="./freezing.html#freezing">freezing page</a></p><h2 id="unfreeze" tabindex="-1">unfreeze <a class="header-anchor" href="#unfreeze" aria-hidden="true">#</a></h2><p>See the <a href="./freezing.html#unfreezing">freezing page</a></p><h2 id="convertpatchestostandard" tabindex="-1">convertPatchesToStandard <a class="header-anchor" href="#convertpatchestostandard" aria-hidden="true">#</a></h2><p>Structura generates patches that are not compliant to standard JSON Patches, however with this helper we can easily convert them to the standard format</p><p>Note that by default the path of the newly generated patches will be an array, and this is the same behaviour as Immer. If you want instead a slash-separated string path like in the JSON Patch RFC, the second argument should be set to false.</p><p>Alternatively to this helper, you can just <a href="./settings.html#enable-standard-patches">turn a setting on</a> to tell Structura to always use standard patches.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">sub</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> patches</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">produceWithPatches</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">sub</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sub</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// the example would also work with reverse patches</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> json_patches_arr_path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convertPatchesToStandard</span><span style="color:#A6ACCD;">(patches) </span><span style="color:#676E95;">// [{ op: &quot;replace&quot;, path: [&quot;sub&quot;, &quot;n&quot;], value: 2 }]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> json_patches_str_path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convertPatchesToStandard</span><span style="color:#A6ACCD;">(patches</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// [{ op: &quot;replace&quot;, path: &quot;/sub/n&quot;, value: 2 }]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// those generated patches can be fed into applyPatches</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">applyPatches</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> json_patches_arr_path)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sub</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#82AAFF;">applyPatches</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> json_patches_str_path)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sub</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="snapshot" tabindex="-1">snapshot <a class="header-anchor" href="#snapshot" aria-hidden="true">#</a></h2><p>Returns a snapshot of the current state, similarly to &#39;current&#39; in Immer.</p><p>Note: basically you are getting a deep clone of the object, so this is very slow and you should use it only for debug purposes.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#82AAFF;">produce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">target</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shallow</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">target</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shallow</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,23),e=[o];function t(r,c,y,F,D,A){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
