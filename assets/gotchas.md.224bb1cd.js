import{_ as s,c as n,o as a,a as o}from"./app.5909c5c4.js";const d=JSON.parse(`{"title":"Gotchas","description":"","frontmatter":{},"headers":[{"level":2,"title":"Lack of strict typing on the return type of the producer","slug":"lack-of-strict-typing-on-the-return-type-of-the-producer","link":"#lack-of-strict-typing-on-the-return-type-of-the-producer","children":[]},{"level":2,"title":"Can't do transpositions on unproxied objects","slug":"can-t-do-transpositions-on-unproxied-objects","link":"#can-t-do-transpositions-on-unproxied-objects","children":[]},{"level":2,"title":"Sets could be unordered","slug":"sets-could-be-unordered","link":"#sets-could-be-unordered","children":[]}],"relativePath":"gotchas.md"}`),e={name:"gotchas.md"},p=o(`<h1 id="gotchas" tabindex="-1">Gotchas <a class="header-anchor" href="#gotchas" aria-hidden="true">#</a></h1><h2 id="lack-of-strict-typing-on-the-return-type-of-the-producer" tabindex="-1">Lack of strict typing on the return type of the producer <a class="header-anchor" href="#lack-of-strict-typing-on-the-return-type-of-the-producer" aria-hidden="true">#</a></h2><p>Structura doesn&#39;t limit you in the return type of your producers: you can return anything you want.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#676E95;">// this is totally valid</span></span>
<span class="line"><span style="color:#82AAFF;">produce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>However, this also means that there is more room for errors. This, for example, is accepted:</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// this is accepted, but it&#39;s wrong!</span></span>
<span class="line"><span style="color:#676E95;">// result will be 2 (the number assigned), but we probably wanted an object instead</span></span>
<span class="line"><span style="color:#676E95;">// (we likely forgot to wrap our function in curly brackets)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">produce</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>If you want to avoid this kind of errors, you have to declare your generic parameters explicitly:</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// ERROR!</span></span>
<span class="line"><span style="color:#676E95;">// this will not be accepted because we were more explicit with our types</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">produce</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Structura also exports a helper function which only allows the same type for the state and the result</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// ERROR!</span></span>
<span class="line"><span style="color:#676E95;">// this will not be accepted because safeProduce does not allow it</span></span>
<span class="line"><span style="color:#676E95;">// with the use of the helper, we don&#39;t have to explicity define types</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">safeProduce</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="can-t-do-transpositions-on-unproxied-objects" tabindex="-1">Can&#39;t do transpositions on unproxied objects <a class="header-anchor" href="#can-t-do-transpositions-on-unproxied-objects" aria-hidden="true">#</a></h2><p>todo</p><p>todo</p><p>todo</p><p>todo</p><h2 id="sets-could-be-unordered" tabindex="-1">Sets could be unordered <a class="header-anchor" href="#sets-could-be-unordered" aria-hidden="true">#</a></h2><p>If you do any modification to a child of a set, the new object will be appended at the end of the set, even if the original element wasn&#39;t at the end.</p><p>However, this is hardly important because the order of the elements in a set is something that you should never rely on.</p>`,18),t=[p];function l(r,c,y,i,C,D){return a(),n("div",null,t)}const F=s(e,[["render",l]]);export{d as __pageData,F as default};
