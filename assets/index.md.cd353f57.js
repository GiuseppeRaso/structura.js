import{_ as e,c as t,o as a,a as r}from"./app.5909c5c4.js";const s="/assets/structural-sharing.bea5552a.png",f=JSON.parse('{"title":"Structura.js","description":"","frontmatter":{},"headers":[],"relativePath":"index.md"}'),i={name:"index.md"},n=r('<h1 id="structura-js" tabindex="-1">Structura.js <a class="header-anchor" href="#structura-js" aria-hidden="true">#</a></h1><p><strong>Structura.js</strong> is a very fast and lightweight Typescript library which allows to create immutable states with a mutable syntax. It is based on the idea of structural sharing.</p><p>The library is very similar to <a href="https://immerjs.github.io/immer/" target="_blank" rel="noreferrer">Immer.js</a>, but it has some advantages over it:</p><ul><li>up to ~22x more performant, even faster than <a href="https://github.com/immutable-js/immutable-js" target="_blank" rel="noreferrer">Immutable</a> most of the time</li><li>freezes the object only at compile time by leveraging Typescript, while most libraries freeze the object at runtime with Object.freeze, which may be slow expecially for nested objects</li><li>circular and multiple references are supported</li><li>does support traspositions and moves of portions of the draft</li><li>can return and modify the draft at the same time</li></ul><p>The library is actually in alpha state. It is probably already usable (many complex scenarios are already covered by tests), but expect the APIs and the types to change in the future.</p><p>\xA0</p><p><img src="'+s+'" alt="Structural Sharing"></p><p><em>(this image was generated by an AI using the stable diffusion algorythm and giving &#39;structural sharing&#39; as an input; I doubt it, but if you have a ton of fantasy it may render the idea behind the concept)</em></p>',8),o=[n];function l(c,h,u,m,p,d){return a(),t("div",null,o)}const _=e(i,[["render",l]]);export{f as __pageData,_ as default};
